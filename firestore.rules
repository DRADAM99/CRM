rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ────────────────
    // Helper Functions
    // ────────────────
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTaskOwner(taskId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/tasks/$(taskId)) &&
        get(/databases/$(database)/documents/tasks/$(taskId)).data.createdBy == request.auth.uid;
    }

    function isTaskAssignee(taskId) {
      let task = get(/databases/$(database)/documents/tasks/$(taskId)).data;
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/tasks/$(taskId)) &&
        (task.assignTo == request.auth.uid || 
         task.assignTo == user.email ||
         task.assignTo == user.alias);
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserRole() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.exists ? userDoc.data.role : "staff";
    }

    function isStaff() {
      return isAuthenticated() && getUserRole() == "staff";
    }

    function isStaffOrAdmin() {
      return isStaff() || isAdmin();
    }

    // ────────────────
    // Users Collection
    // ────────────────
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    // ────────────────
    // Leads Collection
    // ────────────────
    match /leads/{leadId} {
      function isLeadOwner(lead) {
        return request.auth.uid == lead.userId;
      }

      function isValidLeadData(lead) {
        return lead.fullName is string
          && lead.phoneNumber is string
          && lead.status is string
          && lead.message is string
          && lead.createdAt is timestamp;
      }

      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidLeadData(request.resource.data);
      allow update: if isAuthenticated() && isValidLeadData(request.resource.data);
      allow delete: if isAdmin() || isLeadOwner(resource.data);
    }

    // ────────────────
    // Tasks Collection
    // ────────────────
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.creatorId == request.auth.uid ||
        isTaskAssignee(taskId)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.title is string;
      
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid ||
         resource.data.creatorId == request.auth.uid ||
         isTaskAssignee(taskId) ||
         isAdmin());
      
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid ||
         resource.data.creatorId == request.auth.uid ||
         isAdmin());
    }

    // ────────────────
    // Notes Collection
    // ────────────────
    match /notes/{noteId} {
      allow read, create, update, delete: if isAuthenticated();
    }

    // ────────────────
    // Links Collection
    // ────────────────
    match /links/{linkId} {
      allow read, create, update, delete: if isAuthenticated();
    }

  } // END documents
} // END service 